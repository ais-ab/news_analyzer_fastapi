version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: news_analyzer_db_dev
    environment:
      POSTGRES_DB: news_analyzer_dev
      POSTGRES_USER: news_user
      POSTGRES_PASSWORD: news_password
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U news_user -d news_analyzer_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - news_analyzer_network_dev

  # FastAPI Backend (Development with hot reload)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend.dev
    container_name: news_analyzer_backend_dev
    environment:
      - DATABASE_URL=postgresql://news_user:news_password@postgres:5432/news_analyzer_dev
      - SECRET_KEY=dev-secret-key-change-in-production
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
      - ./backend/db:/app/db
      - ./backend/tmp:/app/tmp
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - news_analyzer_network_dev
    restart: unless-stopped

  # React Frontend (Development with hot reload)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend.dev
    container_name: news_analyzer_frontend_dev
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: ["npm", "start"]
    networks:
      - news_analyzer_network_dev
    restart: unless-stopped

volumes:
  postgres_data_dev:
    driver: local

networks:
  news_analyzer_network_dev:
    driver: bridge 